// Figuration overrides to support node-sass to sass switch without pushing a new upstream release

@mixin button-variant($parent, $color, $bg, $border, $focus-shadow, $hover-color, $hover-bg, $hover-border, $active-color, $active-bg, $active-border, $disabled-color, $disabled-bg, $disabled-border) {
    $extender: str-replace($parent, ".", "");

    #{$parent} {
        color: $color;
        background-color: $bg;
        border-color: $border;
    }

    #{$parent}:hover {
        color: $hover-color;
        background-color: $hover-bg;
        border-color: $hover-border;
    }

    // Focus state
    #{$parent}:focus {
        @if $enable-shadows {
            @include box-shadow($btn-box-shadow, $btn-focus-box-shadow-size rgba($focus-shadow, $btn-focus-box-shadow-alpha));
        } @else {
            box-shadow: $btn-focus-box-shadow-size rgba($focus-shadow, $btn-focus-box-shadow-alpha);
        }
    }
    @if $enable-btn-check {
        .btn-check-input:focus ~ #{$parent} {
            @if $enable-shadows {
                @include box-shadow($btn-box-shadow, $btn-focus-box-shadow-size rgba($focus-shadow, $btn-focus-box-shadow-alpha));
            } @else {
                box-shadow: $btn-focus-box-shadow-size rgba($focus-shadow, $btn-focus-box-shadow-alpha);
            }
        }
    }

    // Disabled state
    #{$parent}.disabled,
    #{$parent}:disabled {
        color: $disabled-color;
        background-color: $disabled-bg;
        border-color: $disabled-border;
    }
    @if $enable-btn-check {
        .btn-check-input {
            &[disabled],
            &:disabled {
                ~ #{$parent} {
                    color: $disabled-color;
                    background-color: $disabled-bg;
                    border-color: $disabled-border;
                }
            }
        }
    }

    // Active state
    #{$parent}:active,
    #{$parent}.active,
    #{$parent}.open[data-cfw="dropdown"] {
        color: $active-color;
        background-color: $active-bg;
        border-color: $active-border;
    }
    @if $enable-btn-check {
        .btn-check-input:not([disabled]):not(:disabled):checked ~ #{$parent} {
            color: $active-color;
            background-color: $active-bg;
            border-color: $active-border;
        }
    }

    // Active focus state
    @if $enable-shadows {
        #{$parent}:active:focus,
        #{$parent}.active:focus,
        #{$parent}.open[data-cfw="dropdown"]:focus {
            @include box-shadow($btn-active-box-shadow, $btn-focus-box-shadow-size rgba($focus-shadow, $btn-focus-box-shadow-alpha));
        }
        @if $enable-btn-check {
            .btn-check-input:not([disabled]):not(:disabled):checked:focus ~ #{$parent} {
                @include box-shadow($btn-active-box-shadow, $btn-focus-box-shadow-size rgba($focus-shadow, $btn-focus-box-shadow-alpha));
            }
        }
    }
}
