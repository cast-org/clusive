// Use a base value of 1 here since Infusion multiplies the body line-height by the setting value.
// This allows both Clusive and Readium to use the same line-height as set by Infusion.
body {
    --CT_lineHeight: 1;
}

// stylelint-disable declaration-no-important, selector-max-id
#ff-default,
.ff-default {
    font-family: $font-family-sans-serif !important;
}
#ff-times,
.ff-times {
    font-family: Georgia, Times, "Times New Roman", serif !important;
}
#ff-comic,
.ff-comic {
    font-family: "Comic Sans MS", sans-serif !important;
}
#ff-arial,
.ff-arial {
    font-family: "Helvetica Neue", Arial, sans-serif !important;
}
#ff-verdana,
.ff-verdana {
    font-family: Verdana, sans-serif !important;
}
#ff-dyslexic,
.ff-dyslexic {
    font-family: OpenDyslexicRegular, sans-serif !important;
}

// Readium's default forced height on this container can cause added scrollheight
// in `scroll` view mode causing 'short' pages causing navigation to prev/next page
// to incur a scroll instead of page change.
#reader-info-bottom {
    height: auto !important;
}

// Fix to center of viewport
.fixed-center {
    position: fixed !important;
    top: 50vh !important;
    left: 50vw !important;
}
// stylelint-enable declaration-no-important, selector-max-id

:focus {
    outline-color: var(--CT_focusRingColor);
}

::selection {
    color: var(--CT_selectionColor);
    background-color: var(--CT_selectionBg);
}


*:not(.open) {
    > .is-open {
        display: none;
    }
}
.open {
    > .not-open {
        display: none;
    }
}

h1,
.h1,
h2,
.h2 {
    font-family: "Arial Black", Arial, sans-serif;
    font-weight: 900;
}

.content {
    //max-width: calc(100vw - 8rem);
    padding-top: $header-height + $content-offset-top;
    padding-right: $sidebar-width + $sidebar-gutter;
    padding-bottom: $body-padding-x;
    padding-left: $sidebar-width + $sidebar-gutter;
    margin-right: ($grid-gutter-width / -2);
    margin-left: ($grid-gutter-width / -2);
    outline: 0;

    @include media-breakpoint-up(sm) {
        //max-width: calc(100vw - 10.625rem);
        padding-right: $sidebar-sm-width + $sidebar-sm-gutter;
        padding-left: $sidebar-sm-width + $sidebar-sm-gutter;
    }

    @include media-breakpoint-up(md) {
        padding-top: $header-md-height + $content-offset-top;
    }
}

// stylelint-disable-next-line selector-max-id
#D2Reader-Container iframe {
    //padding-bottom: 2rem;
}

.login-status {
    float: right;
    margin-top: 2em;
    clear: right;
}

.form-text {
    line-height: 1.25;
}

.form-checkradio {
    .form-check-input:checked:not(:focus) ~ .form-check-label {
        &::before {
            box-shadow: $form-checkradio-checked-box-shadow;
        }
    }
}

.form-switch {
    .form-check-input:checked ~ .form-check-label {
        &::before {
            box-shadow: $form-switch-track-checked-box-shadow;
        }
        &::after {
            box-shadow: $form-switch-thumb-checked-box-shadow;
        }
    }
}

.form-switch-dual {
    display: block;

    .form-check-label-pre {
        margin-right: $form-switch-dual-pre-gutter;
    }
    .form-check {
        display: inline-block;
    }
}

.has-form-range-tip {
    position: relative;
}
.form-range-tip {
    position: absolute;
    top: 0;
    @include font-size(.875rem);
    line-height: 1;
    color: var(--CT_formRangeTipColor);
    user-select: none;
    transform: translateX(-50%);
}

.link-above {
    position: relative;
    z-index: 2;
}

.link-prev {
    position: relative;

    // Reset for IE
    &::before {
        color: inherit;
        text-decoration: underline;
    }

    // stylelint-disable-next-line no-duplicate-selectors
    &::before {
        position: relative;
        display: inline-block;
        margin-right: .125em;
        line-height: inherit;
        color: inherit;
        text-decoration: none;
        //vertical-align: baseline;
        content: "<";
    }
}
.link-next {
    position: relative;

    // Reset for IE
    &::after {
        color: inherit;
        text-decoration: underline;
    }

    // stylelint-disable-next-line no-duplicate-selectors
    &::after {
        position: relative;
        display: inline-block;
        margin-left: .125em;
        line-height: inherit;
        color: inherit;
        text-decoration: none;
        //vertical-align: baseline;
        content: ">";
    }
}

.link-back {
    margin-bottom: .75rem;
    //@include font-size(.875rem);

    @include media-breakpoint-up(md) {
        margin-left: -1rem;
    }
}

.link-undelete {
    margin-left: .5rem;
}

.link-btn {
    display: inline-block;
    padding: 0;
    font-family: $font-family-base;
    @include font-size(inherit);
    font-weight: $font-weight-normal;
    color: var(--CT_linkColor);
    text-decoration: none;
    vertical-align: baseline;
    cursor: pointer;
    user-select: none;
    background-color: transparent;
    border: 0 solid transparent;
    @include border-radius(0);
    @include box-shadow(none);

    @include hover-focus() {
        color: var(--CT_linkHoverColor);
        text-decoration: underline;
    }

    &:active {
        @include box-shadow(none);
    }

    &:disabled {
        color: var(--CT_bodyColor);
        text-decoration: none;
        pointer-events: none;
        @include box-shadow(none);
    }
}

.definition-speech {
    @include font-size(.875rem);
    color: var(--CT_definitionSpeechColor);
}
.definition-meaning {
    font-weight: $font-weight-bolder;
    color: var(--CT_definitionSpeechColor);
}
.definition-example {
    display: block;
    margin-top: .25rem;
    @include font-size(.875rem);
    font-style: italic;
    color: var(--CT_definitionSpeechColor);
}

.translate-source {
    font-weight: $font-weight-bold;
    color: var(--CT_translateSourceColor);
}
.translate-ouput {
    font-weight: $font-weight-normal;
    color: var(--CT_translateOutputColor);
}

// Django error list
.errorlist {
    padding: .25rem 1rem;
    color: var(--CT_errorListColor);
    background-color: var(--CT_errorListBg);
    @include border-radius($border-radius);

    > li {
        margin-left: 1rem;
    }
}

.media-img {
    width: 4rem;
    margin-right: 1rem;
}

.features {
    position: fixed;
    top: 0;
    left: 0;
    z-index: $zindex-tooltip;
    width: 100vw;
    height: 100vh;
    pointer-events: none;

    .content {
        position: relative;
        height: 100vh;
    }

    .tooltip {
        pointer-events: auto;
    }
}
.feature-context {
    position: absolute;
    //top: 33%;
    //left: 50%;
    top: 66%;
    left: $sidebar-width;
    margin-right: ($grid-gutter-width / -2);
    margin-left: ($grid-gutter-width / -2);
    pointer-events: none;
    outline: 0;
    @include sr-only();

    @include media-breakpoint-up(sm) {
        left: $sidebar-sm-width;
    }
}

.feature-list {
    li {
        margin-left: 1.5rem;
    }
    .feature-icon {
        margin-left: -1.25rem;
    }
}

.rule-text {
    display: flex;
    flex-direction: row;
    padding: .5rem 0;

    &::before,
    &::after {
        flex: 1 1;
        margin: auto;
        content: "";
        border-bottom: 1px solid;
    }
    &::before {
        margin-right: .5rem;
    }
    &::after {
        margin-left: .5rem;
    }
}

.content-text {
    max-width: 70ch;
    margin: 0 auto;
    line-height: 1.5;

    h1,
    .h1,
    h2,
    .h2,
    h3,
    .h3,
    h4,
    .h4,
    h5,
    .h5,
    h6,
    .h6 {
        font-family: "Arial Black", Arial, sans-serif;
        font-weight: 900;
        line-height: 1.125;
    }
    h1,
    .h1 {
        @include font-size(2rem);
    }

    h2,
    .h2 {
        @include font-size(1.75rem);
    }

    h3,
    .h3 {
        @include font-size(1.5rem);
    }

    h4,
    .h4 {
        @include font-size(1.25rem);
    }

    h5,
    .h5 {
        @include font-size(1.125rem);
    }

    h6,
    .h6 {
        @include font-size(1rem);
    }

    dt {
        margin-bottom: -.25rem;
    }

    address {
        line-height: 1.25;
    }
}

@media (min-width: 36em) {
    .order-sm-first {
        order: -1;
    }
}

// Sorting indicators
.sort-up {
    white-space: nowrap;

    &::after {
        @extend %caret-after;
        @include caret-up($sort-border-width);
        margin-left: .25rem;
        color: var(--CT_bodyColor);
    }
}
.sort-down {
    white-space: nowrap;

    &::after {
        @extend %caret-after;
        @include caret-down($sort-border-width);
        margin-left: .25rem;
        color: var(--CT_bodyColor);
    }
}

.section-rule {
    & + & {
        padding-top: 1rem;
        margin-top: 1rem;
        border-top: 1px solid var(--CT_modalContentBorderColor);
    }
}
