# Generated by Django 3.2.16 on 2022-11-28 19:30

import json

from django.db import migrations, models
from django.db.models import QuerySet


# When the `words_looked_up` field is added, each ClusiveUser's Events are
# searched for 'lookup' events.  Each day's worth of Events are used to capture
# the words looked up that day and added to a ParadataDaily record
def batch_load_daily_word_lists(apps, schema_editor):
    # Relevant models
    ParadataDaily = apps.get_model('library', 'ParadataDaily')
    Event = apps.get_model('eventlog', 'Event')
    ClusiveUser = apps.get_model('roster', 'ClusiveUser')

    for clusive_user in ClusiveUser.objects.all():
        # Get all the avents for the user that involve word lookup
        word_events = Event.objects.filter(
            actor=clusive_user,
            control__icontains='lookup'
        ).order_by('event_time')
        # Get the first event and loop to make or update the ParadataDaily
        # records.
        first_event = word_events.first()
        the_rest = word_events
        while first_event:
            # Gather all the other events for the same day as the first event
            one_days_worth = the_rest.filter(
                event_time__date=first_event.event_time.date()
            )
            record_words(clusive_user, one_days_worth, ParadataDaily)
            # Get the rest of the events minus the first days' worth, and the
            # first event of that remainder.
            the_rest = the_rest.exclude(
                pk__in=one_days_worth.values_list('pk', flat=True)
            )
            first_event = the_rest.first()

def record_words(clusive_user, one_days_worth: QuerySet, ParadataDaily):
    word_set = set()
    for word_event in one_days_worth:
        if word_event.value:
            word_set.add(word_event.value)
    if len(word_set) > 0:
        word_list = list(word_set)
        # The ParadataDaily record must exist -- since there are word lookup
        # events, there is a Paradata record that recorded
        paradata_daily = ParadataDaily.objects.get(
            paradata__user=clusive_user,
            date=one_days_worth.first().event_time.date()
        )
        paradata_daily.words_looked_up=json.dumps(word_list)
        paradata_daily.save()


class Migration(migrations.Migration):

    dependencies = [
        ('library', '0058_educatorresourcecategory_feature_alt_format'),
    ]

    operations = [
        migrations.AddField(
            model_name='paradatadaily',
            name='words_looked_up',
            field=models.TextField(blank=True, null=True, verbose_name='JSON list of words looked up'),
        ),
#        migrations.RunPython(batch_load_daily_word_lists, migrations.RunPython.noop),
    ]
